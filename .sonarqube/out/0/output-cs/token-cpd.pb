Ã
Qc:\Education\csharp\VisualStudio\Epam.Trainings\Training_1\Task_1\ICoordinates.cs
	namespace 	
Epam
 
. 

Training_1 
. 
Task_1  
{ 
public 

	interface 
ICoordinates !
{ 
double		 
X		 
{		 
get		 
;		 
set		 
;		 
}		 
double 
Y 
{ 
get 
; 
set 
; 
} 
} 
} –
Jc:\Education\csharp\VisualStudio\Epam.Trainings\Training_1\Task_1\ISize.cs
	namespace 	
Epam
 
. 

Training_1 
. 
Task_1  
{ 
public 

	interface 
ISize 
{ 
double		 
Width		 
{		 
get		 
;		 
set		 
;		  
}		! "
double 
Height 
{ 
get 
; 
set  
;  !
}" #
double 
	Perimeter 
( 
) 
; 
} 
} ·
Kc:\Education\csharp\VisualStudio\Epam.Trainings\Training_1\Task_1\Person.cs
	namespace 	
Epam
 
. 

Training_1 
. 
Task_1  
{ 
public 

struct 
Person 
{ 
public		 
string		 
	FirstName		 
{		  !
get		" %
;		% &
set		' *
;		* +
}		, -
public 
string 
LastName 
{  
get! $
;$ %
set& )
;) *
}+ ,
private 
int 
_age 
; 
public 
int 
Age 
{ 	
get 
=> 
_age 
; 
set 
=> 
_age 
= 
value 
>  !
$num" #
?$ %
value' ,
: 
throw 
new 
ArgumentException -
(- .
$str. I
)I J
;J K
} 	
public 
string 
	OlderThan 
(  
int  #
n$ %
)% &
{ 	
if 
( 
Age 
== 
n 
) 
{ 
return 
$" 
{ 
	FirstName #
}# $
{% &
LastName& .
}. /
	 same as / 8
{8 9
n9 :
}: ;
"; <
;< =
} 
return 
_age 
> 
n 
? 
$"  
{  !
	FirstName! *
}* +
{, -
LastName- 5
}5 6
 older than 6 B
{B C
nC D
}D E
"E F
: 
$" 
{ 
	FirstName 
} 
{  !
LastName! )
}) *
 younger than * 8
{8 9
n9 :
}: ;
"; <
;< =
} 	
public 
string 
	OlderThan 
(  
Person  &
person' -
)- .
{   	
return!! 
	OlderThan!! 
(!! 
person!! #
.!!# $
Age!!$ '
)!!' (
;!!( )
}"" 	
}## 
}$$ ì
Nc:\Education\csharp\VisualStudio\Epam.Trainings\Training_1\Task_1\Rectangle.cs
	namespace 	
Epam
 
. 

Training_1 
. 
Task_1  
{ 
public 

struct 
	Rectangle 
: 
ISize #
,# $
ICoordinates% 1
{ 
private		 
double		 
_width		 
;		 
private

 
double

 
_height

 
;

 
public 
double 
Width 
{ 	
get 
=> 
_width 
; 
set 
=> 
_width 
= 
value !
>" #
$num$ %
?& '
value( -
: 
throw 
new 
ArgumentException -
(- .
$str. L
)L M
;M N
} 	
public 
double 
Height 
{ 	
get 
=> 
_height 
; 
set 
=> 
_height 
= 
value "
># $
$num% &
?' (
value) .
: 
throw 
new 
ArgumentException -
(- .
$str. M
)M N
;N O
} 	
public 
double 
X 
{ 
get 
; 
set "
;" #
}$ %
public 
double 
Y 
{ 
get 
; 
set "
;" #
}$ %
public 
double 
	Perimeter 
(  
)  !
{ 	
return   
$num   
*   
(   
Width   
+   
Height    &
)  & '
;  ' (
}!! 	
}"" 
}## ±
Kc:\Education\csharp\VisualStudio\Epam.Trainings\Training_1\Task_2\Colors.cs
	namespace 	
Epam
 
. 

Training_1 
. 
Task_2  
{ 
public 

enum 
Colors 
{ 
Red		 
=		 
$num		 
,		 
Green

 
=

 
$num

 
,

 
Blue 
= 
$num 
, 
Black 
= 
$num 
, 
White 
= 
$num 
, 
Yellow 
= 
$num 
} 
} µ
Sc:\Education\csharp\VisualStudio\Epam.Trainings\Training_1\Task_2\EnumExtensions.cs
	namespace 	
Epam
 
. 

Training_1 
. 
Task_2  
{ 
public 

static 
class 
EnumExtensions &
{ 
public		 
static		 
string		 
Values		 #
(		# $
this		$ (
Enum		) -
color		. 3
)		3 4
{

 	
var 
values 
= 
Enum 
. 
	GetValues '
(' (
typeof( .
(. /
Colors/ 5
)5 6
)6 7
;7 8
Array 
. 
Sort 
( 
values 
) 
; 
var 
result 
= 
new 
StringBuilder *
(* +
)+ ,
;, -
foreach 
( 
var 
a 
in 
values #
)# $
{ 
result 
. 
Append 
( 
$"  
{  !
a! "
}" #
 = # &
{& '
(' (
int( +
)+ ,
a, -
}- .
; . 0
"0 1
)1 2
;2 3
} 
return 
result 
. 
ToString "
(" #
)# $
;$ %
} 	
} 
} ”
Nc:\Education\csharp\VisualStudio\Epam.Trainings\Training_1\Task_2\LongRange.cs
	namespace 	
Epam
 
. 

Training_1 
. 
Task_2  
{ 
public 

enum 
	LongRange 
: 
long  
{ 
Max		 
=		 
long		 
.		 
MaxValue		 
,		 
Min

 
=

 
long

 
.

 
MinValue

 
} 
} Ç
Kc:\Education\csharp\VisualStudio\Epam.Trainings\Training_1\Task_2\Months.cs
	namespace 	
Epam
 
. 

Training_1 
. 
Task_2  
{ 
public 

enum 
Months 
{ 
January 
, 
February 
, 
March		 
,		 
April

 
,

 
May 
, 
June 
, 
July 
, 
August 
, 
	September 
, 
October 
, 
November 
, 
December 
} 
} 